name: "🧐 Qwen-Code"

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
  issue_comment:
    types:
      - created
  pull_request_review_comment:
    types:
      - created
  pull_request_review:
    types:
      - submitted

permissions:
  contents: read
  issues: write
  pull-requests: write
  id-token: write

jobs:
  review-pr:
    if: |
      (
        github.event_name == 'pull_request' &&
        contains(fromJson('["opened","reopened","synchronize","ready_for_review"]'), github.event.action) &&
        (
          github.event.pull_request.author_association == 'OWNER' ||
          github.event.pull_request.author_association == 'MEMBER' ||
          github.event.pull_request.author_association == 'COLLABORATOR'
        )
      ) ||
      (
        github.event_name == 'issue_comment' &&
        github.event.issue.pull_request &&
        contains(github.event.comment.body, '@qwen /review') &&
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        )
      ) ||
      (
        github.event_name == 'pull_request_review_comment' &&
        contains(github.event.comment.body, '@qwen /review') &&
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        )
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, '@qwen /review') &&
        (
          github.event.review.author_association == 'OWNER' ||
          github.event.review.author_association == 'MEMBER' ||
          github.event.review.author_association == 'COLLABORATOR'
        )
      )
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment: "Agents/Bots"
    env:
      QWEN_CODE_API_KEY: ${{ secrets.OPENROUTER_API_KEY_2 }}
      QWEN_CODE_BASE_URL: ${{ vars.QWEN_CODE_BASE_URL || '' }}
      QWEN_CODE_MODEL: ${{ vars.QWEN_CODE_MODEL || '' }}
    steps:
      - name: "Qwen credentials not configured"
        if: ${{ env.QWEN_CODE_API_KEY == '' || env.QWEN_CODE_BASE_URL == '' || env.QWEN_CODE_MODEL == '' }}
        run: |
          echo "OPENROUTER_API_KEY_2 secret and QWEN_CODE_BASE_URL, QWEN_CODE_MODEL variables must be configured to run Qwen Code review."
          echo "Skipping automated review."

      - name: Checkout repository
        if: ${{ env.QWEN_CODE_API_KEY != '' && env.QWEN_CODE_BASE_URL != '' && env.QWEN_CODE_MODEL != '' }}
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # ratchet:actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Gather pull request context (pull_request)
        id: context_pr
        if: ${{ env.QWEN_CODE_API_KEY != '' && env.QWEN_CODE_BASE_URL != '' && env.QWEN_CODE_MODEL != '' && github.event_name == 'pull_request' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          pr_number="${{ github.event.pull_request.number }}"
          echo "pr_number=${pr_number}" >> "${GITHUB_OUTPUT}"
          echo "additional_instructions=" >> "${GITHUB_OUTPUT}"

          pr_data=$(gh pr view "${pr_number}" --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)
          echo "pr_data=${pr_data}" >> "${GITHUB_OUTPUT}"

          changed_files=$(gh pr diff "${pr_number}" --name-only)
          {
            echo "changed_files<<EOF"
            echo "${changed_files}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: Gather pull request context (comments)
        id: context_comment
        if: ${{ env.QWEN_CODE_API_KEY != '' && env.QWEN_CODE_BASE_URL != '' && env.QWEN_CODE_MODEL != '' && (github.event_name == 'issue_comment' || github.event_name == 'pull_request_review_comment' || github.event_name == 'pull_request_review') }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COMMENT_BODY: ${{ github.event.comment.body || '' }}
          REVIEW_BODY: ${{ github.event.review.body || '' }}
        run: |
          set -euo pipefail

          case "${{ github.event_name }}" in
            issue_comment)
              pr_number="${{ github.event.issue.number }}"
              raw_body="${COMMENT_BODY}"
              ;;
            pull_request_review_comment)
              pr_number="${{ github.event.pull_request.number }}"
              raw_body="${COMMENT_BODY}"
              ;;
            pull_request_review)
              pr_number="${{ github.event.pull_request.number }}"
              raw_body="${REVIEW_BODY}"
              ;;
            *)
              echo "Unsupported event"
              exit 1
              ;;
          esac

          additional_instructions=$(echo "${raw_body}" | sed 's/.*@qwen \/review//' | xargs || true)

          echo "pr_number=${pr_number}" >> "${GITHUB_OUTPUT}"
          echo "additional_instructions=${additional_instructions}" >> "${GITHUB_OUTPUT}"

          pr_data=$(gh pr view "${pr_number}" --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)
          echo "pr_data=${pr_data}" >> "${GITHUB_OUTPUT}"

          changed_files=$(gh pr diff "${pr_number}" --name-only)
          {
            echo "changed_files<<EOF"
            echo "${changed_files}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: Run Qwen PR review
        id: qwen
        if: ${{ env.QWEN_CODE_API_KEY != '' && env.QWEN_CODE_BASE_URL != '' && env.QWEN_CODE_MODEL != '' }}
        uses: QwenLM/qwen-code-action@5fd6818d04d64e87d255ee4d5f77995e32fbf4c2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ steps.context_pr.outputs.pr_number || steps.context_comment.outputs.pr_number }}
          PR_DATA: ${{ steps.context_pr.outputs.pr_data || steps.context_comment.outputs.pr_data }}
          CHANGED_FILES: ${{ steps.context_pr.outputs.changed_files || steps.context_comment.outputs.changed_files }}
          ADDITIONAL_INSTRUCTIONS: ${{ steps.context_pr.outputs.additional_instructions || steps.context_comment.outputs.additional_instructions }}
          REPOSITORY: ${{ github.repository }}
        with:
          OPENAI_API_KEY: ${{ env.QWEN_CODE_API_KEY }}
          OPENAI_BASE_URL: ${{ env.QWEN_CODE_BASE_URL }}
          OPENAI_MODEL: ${{ env.QWEN_CODE_MODEL }}
          settings_json: |
            {
              "coreTools": [
                "run_shell_command",
                "write_file"
              ],
              "sandbox": false
            }
          prompt: |
            You are an autonomous Qwen code reviewer running inside a GitHub Actions workflow for the repository $REPOSITORY.
            You have access to the GitHub CLI and shell commands. Use them to collect the necessary context before writing your review.

            Required commands to run before drafting the review:
            1. echo "$PR_DATA"
            2. echo "$CHANGED_FILES"
            3. echo "$PR_NUMBER"
            4. echo "$ADDITIONAL_INSTRUCTIONS"
            5. gh pr diff $PR_NUMBER
            6. Inspect any specific files as needed using commands such as head, tail, or cat.

            After reviewing the changes, produce a markdown report using the format below. Write the review to stdout only—do NOT post comments with the GitHub CLI. The workflow will publish your review for you.

            ## Summary
            - Provide a concise overview of the pull request.

            ## Strengths (optional)
            - Highlight notable improvements or best practices.

            ## Issues
            - List blocking issues with references to files and line numbers when possible. If there are no blocking issues, state "No blocking issues identified."

            ## Suggestions (optional)
            - Offer non-blocking improvements or follow-up ideas.

            ## Testing
            - Describe which tests were run or should be run to validate the changes.

            End the review with a verdict line that starts with either `APPROVED` or `REVISIONS_REQUIRED`.

      - name: Post Qwen review comment
        if: ${{ env.QWEN_CODE_API_KEY != '' && env.QWEN_CODE_BASE_URL != '' && env.QWEN_CODE_MODEL != '' && steps.qwen.outputs.summary != '' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const summary = ${{ toJSON(steps.qwen.outputs.summary) }};
            if (!summary || summary.trim().length === 0) {
              core.info('Qwen review output is empty.');
              return;
            }

            const issueNumber = ${{ toJSON(steps.context_pr.outputs.pr_number || steps.context_comment.outputs.pr_number) }};

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
              body: summary,
            });
