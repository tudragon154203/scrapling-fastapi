name: 'ðŸ¤– Claude'

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created, edited]
  pull_request_review_comment:
    types: [created, edited]
  issues:
    types: [opened, assigned, reopened]
  pull_request_review:
    types: [submitted, edited]

jobs:
  claude:
    if: |
      (
        github.event_name == 'pull_request'
      ) ||
      (
        github.event_name == 'issue_comment' &&
        contains(fromJSON('["OWNER","COLLABORATOR","MEMBER"]'), github.event.comment.author_association) &&
        (
          startsWith(github.event.comment.body, '@claude') ||
          startsWith(github.event.comment.body, 'CLAUDE') ||
          startsWith(github.event.comment.body, '/claude')
        )
      ) ||
      (
        github.event_name == 'pull_request_review_comment' &&
        contains(fromJSON('["OWNER","COLLABORATOR","MEMBER"]'), github.event.comment.author_association) &&
        (
          startsWith(github.event.comment.body, '@claude') ||
          startsWith(github.event.comment.body, 'CLAUDE') ||
          startsWith(github.event.comment.body, '/claude')
        )
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        contains(fromJSON('["OWNER","COLLABORATOR","MEMBER"]'), github.event.review.author_association) &&
        (
          startsWith(github.event.review.body, '@claude') ||
          startsWith(github.event.review.body, 'CLAUDE') ||
          startsWith(github.event.review.body, '/claude')
        )
      ) ||
      (
        github.event_name == 'issues' &&
        contains(fromJSON('["OWNER","COLLABORATOR","MEMBER"]'), github.event.issue.author_association) &&
        (
          contains(github.event.issue.body, '@claude') ||
          contains(github.event.issue.body, 'CLAUDE') ||
          contains(github.event.issue.body, '/claude') ||
          contains(github.event.issue.title, '@claude') ||
          contains(github.event.issue.title, 'CLAUDE') ||
          contains(github.event.issue.title, '/claude')
        )
      )
    runs-on: ubuntu-22.04
    environment: 'Agents/Bots'
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git user
        run: |
          git config --global user.name "Claude Code"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Start Claude Code Router
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          set -euo pipefail
          mkdir -p ~/.claude-code-router
          cat > ~/.claude-code-router/config.json <<EOF
          {
            "LOG": false,
            "LOG_LEVEL": "info",
            "CLAUDE_PATH": "",
            "HOST": "127.0.0.1",
            "PORT": 3456,
            "APIKEY": "",
            "API_TIMEOUT_MS": "60000",
            "PROXY_URL": "",
            "transformers": [],
            "Providers": [
              {
                "name": "openrouter",
                "api_base_url": "https://openrouter.ai/api/v1/chat/completions",
                "api_key": "${OPENROUTER_API_KEY}",
                "models": [
                  "qwen/qwen3-coder:free",
                  "z-ai/glm-4.5-air:free",
                  "moonshotai/kimi-k2:free",
                  "deepseek/deepseek-chat-v3.1:free"
                ],
                "transformer": {
                  "use": [
                    "openrouter"
                  ],
                  "tngtech/deepseek-r1t2-chimera:free": {
                    "use": [
                      "deepseek"
                    ]
                  },
                  "deepseek/deepseek-chat-v3-0324:free": {
                    "use": [
                      "deepseek"
                    ]
                  }
                }
              },
              {
                "name": "gemini",
                "api_base_url": "https://generativelanguage.googleapis.com/v1beta/models/",
                "api_key": "${GEMINI_API_KEY}",
                "models": [
                  "gemini-2.5-flash"
                ],
                "transformer": {
                  "use": [
                    "gemini"
                  ]
                }
              }
            ],
            "StatusLine": {
              "enabled": true,
              "currentStyle": "default",
              "default": {
                "modules": [
                  {
                    "type": "workDir",
                    "icon": "",
                    "text": "{{workDirName}}",
                    "color": "bright_blue"
                  },
                  {
                    "type": "model",
                    "icon": "",
                    "text": "{{model}}",
                    "color": "bright_yellow"
                  },
                  {
                    "type": "usage",
                    "icon": "",
                    "text": "{{inputTokens}} / {{outputTokens}}",
                    "color": "bright_magenta"
                  },
                  {
                    "type": "script",
                    "icon": "",
                    "text": "Script Module",
                    "color": "bright_cyan",
                    "scriptPath": ""
                  }
                ]
              },
              "powerline": {
                "modules": []
              }
            },
            "Router": {
              "default": "openrouter,z-ai/glm-4.5-air:free",
              "background": "openrouter,moonshotai/kimi-k2:free",
              "think": "openrouter,deepseek/deepseek-chat-v3.1:free",
              "longContext": "gemini,gemini-2.5-flash",
              "longContextThreshold": 100000,
              "webSearch": "openrouter,moonshotai/kimi-k2:free"
            }
          }
          EOF
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@latest start &
          # Temporary fixed delay until healthcheck is reintroduced
          sleep 5
        shell: bash

      - name: Determine edit permissions
        id: edit_permissions
        env:
          EVENT_NAME: ${{ github.event_name }}
          COMMENT_ASSOC: ${{ github.event.comment.author_association || '' }}
          REVIEW_ASSOC: ${{ github.event.review.author_association || '' }}
          ISSUE_IS_PR: ${{ github.event.issue && github.event.issue.pull_request && 'true' || '' }}
        run: |
          set -euo pipefail

          can_push=false
          case "$EVENT_NAME" in
            issue_comment)
              if [ "$ISSUE_IS_PR" = "true" ]; then
                if [ "$COMMENT_ASSOC" = "OWNER" ] || [ "$COMMENT_ASSOC" = "MEMBER" ]; then
                  can_push=true
                fi
              fi
              ;;
            pull_request_review_comment)
              if [ "$COMMENT_ASSOC" = "OWNER" ] || [ "$COMMENT_ASSOC" = "MEMBER" ]; then
                can_push=true
              fi
              ;;
            pull_request_review)
              if [ "$REVIEW_ASSOC" = "OWNER" ] || [ "$REVIEW_ASSOC" = "MEMBER" ]; then
                can_push=true
              fi
              ;;
          esac

          echo "can_push=$can_push" >> "$GITHUB_OUTPUT"
          if [ "$can_push" = "true" ]; then
            {
              echo "extra_tools<<'EOF'"
              echo '--allowedTools "Bash(gh pr checkout:*)"'
              echo '--allowedTools "Bash(git add:*)"'
              echo '--allowedTools "Bash(git restore:*)"'
              echo '--allowedTools "Bash(git checkout:*)"'
              echo '--allowedTools "Bash(git switch:*)"'
              echo '--allowedTools "Bash(git mv:*)"'
              echo '--allowedTools "Bash(git rm:*)"'
              echo '--allowedTools "Bash(git commit:*)"'
              echo '--allowedTools "Bash(git push:*)"'
              echo 'EOF'
            } >> "$GITHUB_OUTPUT"
          else
            echo "extra_tools=" >> "$GITHUB_OUTPUT"
          fi

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
          ANTHROPIC_API_KEY: "dummy"
          GH_TOKEN: ${{ secrets.GH_TOKEN || github.token }}
          GITHUB_TOKEN: ${{ github.token }}
          CLAUDE_CAN_PUSH: ${{ steps.edit_permissions.outputs.can_push }}
        with:
          anthropic_api_key: "dummy"
          prompt: |
              REPO: ${{ github.repository }}
              EVENT: ${{ github.event_name }}
              PR NUMBER: ${{ github.event.pull_request && github.event.pull_request.number || '' }}
              ISSUE NUMBER: ${{ github.event.issue && github.event.issue.number || '' }}
              PR HEAD REPO: ${{ github.event.pull_request && github.event.pull_request.head.repo.full_name || '' }}
              PR HEAD IS FORK: ${{ github.event.pull_request && github.event.pull_request.head.repo.fork || '' }}
              ISSUE IS PULL REQUEST: ${{ github.event.issue && github.event.issue.pull_request && 'true' || '' }}
              COMMENT BODY: ${{ github.event.comment && github.event.comment.body || '' }}
              REVIEW BODY: ${{ github.event.review && github.event.review.body || '' }}
              ISSUE TITLE: ${{ github.event.issue && github.event.issue.title || '' }}
              ISSUE BODY: ${{ github.event.issue && github.event.issue.body || '' }}
              CLAUDE CAN PUSH: ${{ steps.edit_permissions.outputs.can_push }}

              Act as a helpful GitHub assistant for the current event.
              - For pull requests: review the changes for quality, bugs, security, and performance.
              - For issues: help triage or answer questions.
              - For comments or reviews: address the user's request and provide any necessary analysis.

              The repository is already checked out in the working directory.

              Before making any repository changes, carefully read the triggering text above. Only modify code or push commits when a project maintainer explicitly asks you to do so (for example, comments like "@claude fix â€¦", "@claude update â€¦", or similar clear change requests). If the request is purely for a review or summary (for example, "@claude review"), provide feedback without editing the repository.

              When a valid change request is made:
              1. Check out the pull request head branch (for example with `gh pr checkout <number>`) so that any commits are applied to the contributor's branch.
              2. Implement the minimal changes needed to satisfy the request and keep commits focused.
              3. Run appropriate tests or linters (such as `pytest`, `pre-commit`, or other relevant commands) to validate the update.
              4. Stage the affected files with `git add`, commit with a descriptive message, and push back to the same branch.
              5. Leave a follow-up comment summarizing the modifications and their verification.

              If you are unable to push changes (for example, the pull request comes from a fork without write access as indicated by `PR HEAD IS FORK`), explain the limitation in a GitHub comment instead of failing silently.

              You must not attempt to run `git push`, create commits, or modify the repository when `CLAUDE CAN PUSH` is not `true`.

              Use `gh pr comment` for incremental pull request feedback or `gh issue comment` for issue discussions.
              When you are ready to submit your final overall review on a pull request, call `gh pr review --body "$REVIEW"` (filling `$REVIEW` with your markdown feedback).
              Use `mcp__github_inline_comment__create_inline_comment` to make inline comments on pull request diffs.

          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment"
            --allowedTools "Bash(gh pr comment:*)"
            --allowedTools "Bash(gh pr review:*)"
            --allowedTools "Bash(gh issue comment:*)"
            --allowedTools "Bash(gh pr diff:*)"
            --allowedTools "Bash(gh pr view:*)"
            --allowedTools "Bash(gh pr list:*)"
            --allowedTools "Bash(gh issue view:*)"
            --allowedTools "Bash(gh issue list:*)"
            --allowedTools "Bash(git status:*)"
            --allowedTools "Bash(git diff:*)"
            --allowedTools "Bash(git fetch:*)"
            --allowedTools "Bash(git pull:*)"
            --allowedTools "Bash(git config:*)"
            --allowedTools "Bash(pytest:*)"
            --allowedTools "Bash(python:*)"
            --allowedTools "Bash(pip:*)"
            --allowedTools "Bash(pip3:*)"
            --allowedTools "Bash(pre-commit:*)"
            --allowedTools "Bash(poetry:*)"
            --allowedTools "Bash(uv:*)"
            --allowedTools "Bash(npm:*)"
            --allowedTools "Bash(yarn:*)"
            --allowedTools "Bash(pnpm:*)"
            --allowedTools "Bash(bun:*)"
            ${{ steps.edit_permissions.outputs.extra_tools }}
