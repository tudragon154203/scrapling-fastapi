name: 'ðŸ¤– Claude'

on:
  workflow_call:
    inputs:
      event-name:
        required: true
        type: string
      event:
        required: true
        type: string
      target-id:
        required: false
        type: string
      target-type:
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  issues: write
  id-token: write
  actions: read


jobs:
  claude:
    runs-on: ${{ vars.OS || 'ubuntu-latest' }}
    concurrency:
      group: claude-${{ inputs.target-id != '' && inputs.target-id || github.run_id }}
      cancel-in-progress: true
    environment: 'Agents/Bots'
    env:
      EVENT_NAME: ${{ inputs.event-name }}
      EVENT_PAYLOAD: ${{ inputs.event }}
      TARGET_ID: ${{ inputs.target-id || '' }}
      TARGET_TYPE: ${{ inputs.target-type || '' }}
      GEMINI_MODEL: ${{ vars.GEMINI_MODEL || 'gemini-2.5-flash' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: React with ðŸ‘€ to show Claude is running
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { join } = require('node:path');
            const reactWithEmoji = require(join(process.cwd(), '.github/workflows/scripts/common/javascript/react_with_emoji.cjs'));
            await reactWithEmoji({ github, context, core, reaction: 'eyes' });

      - name: Setup Bun runtime
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Start Claude Code Router
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          OPENROUTER_MODEL: ${{ vars.OPENROUTER_MODEL || 'z-ai/glm-4.5-air:free' }}
        run: |
          set -euo pipefail
          mkdir -p ~/.claude-code-router
          cat > ~/.claude-code-router/config.json <<EOF
          {
            "LOG": false,
            "LOG_LEVEL": "info",
            "CLAUDE_PATH": "",
            "HOST": "127.0.0.1",
            "PORT": 3456,
            "APIKEY": "",
            "API_TIMEOUT_MS": "60000",
            "PROXY_URL": "",
            "transformers": [],
            "Providers": [
              {
                "name": "openrouter",
                "api_base_url": "https://openrouter.ai/api/v1/chat/completions",
                "api_key": "${OPENROUTER_API_KEY}",
                "models": [
                  "qwen/qwen3-coder:free",
                  "z-ai/glm-4.5-air:free",
                  "moonshotai/kimi-k2:free",
                  "deepseek/deepseek-chat-v3.1:free",
                  "openrouter/sonoma-sky-alpha"
                ],
                "transformer": {
                  "use": [
                    "openrouter"
                  ],
                  "tngtech/deepseek-r1t2-chimera:free": {
                    "use": [
                      "deepseek"
                    ]
                  },
                  "deepseek/deepseek-chat-v3-0324:free": {
                    "use": [
                      "deepseek"
                    ]
                  }
                }
              },
              {
                "name": "gemini",
                "api_base_url": "https://generativelanguage.googleapis.com/v1beta/models/",
                "api_key": "${GEMINI_API_KEY}",
                "models": [
                  "${GEMINI_MODEL}"
                ],
                "transformer": {
                  "use": [
                    "gemini"
                  ]
                }
              }
            ],
            "StatusLine": {
              "enabled": true,
              "currentStyle": "default",
              "default": {
                "modules": [
                  {
                    "type": "workDir",
                    "icon": "",
                    "text": "{{workDirName}}",
                    "color": "bright_blue"
                  },
                  {
                    "type": "model",
                    "icon": "",
                    "text": "{{model}}",
                    "color": "bright_yellow"
                  },
                  {
                    "type": "usage",
                    "icon": "",
                    "text": "{{inputTokens}} / {{outputTokens}}",
                    "color": "bright_magenta"
                  },
                  {
                    "type": "script",
                    "icon": "",
                    "text": "Script Module",
                    "color": "bright_cyan",
                    "scriptPath": ""
                  }
                ]
              },
              "powerline": {
                "modules": []
              }
            },
            "Router": {
              "default": "openrouter,${OPENROUTER_MODEL}",
              "background": "openrouter,moonshotai/kimi-k2:free",
              "think": "openrouter,deepseek/deepseek-chat-v3.1:free",
              "longContext": "gemini,${GEMINI_MODEL}",
              "longContextThreshold": 100000,
              "webSearch": "openrouter,moonshotai/kimi-k2:free"
            }
          }
          EOF
          nohup ~/.bun/bin/bunx @musistudio/claude-code-router@latest start &
          # Temporary fixed delay until healthcheck is reintroduced
          sleep 5
        shell: bash

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@v1
        env:
          ANTHROPIC_BASE_URL: http://localhost:3456
          ANTHROPIC_API_KEY: "dummy"
        with:
          anthropic_api_key: "dummy"
          prompt: |
              REPO: ${{ github.repository }}
              EVENT: ${{ inputs.event-name }}
              PR NUMBER: ${{ inputs.target-type == 'pull_request' && inputs.target-id || '' }}
              ISSUE NUMBER: ${{ inputs.target-type == 'issue' && inputs.target-id || '' }}

              Act as a helpful GitHub assistant for the current event.
              - For pull requests: review the changes for quality, bugs, security, and performance.
              - For issues: help triage or answer questions.
              - For comments or reviews: address the user's request and provide any necessary analysis.

              The repository is already checked out in the working directory.

              Use `gh pr comment` for pull request feedback or `gh issue comment` for issue discussions.
              Use `mcp__github_inline_comment__create_inline_comment` to make inline comments on pull request diffs.
              Only interact through GitHub comments.

          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment"
            --allowedTools "Bash(gh pr comment:*)"
            --allowedTools "Bash(gh issue comment:*)"
            --allowedTools "Bash(gh pr diff:*)"
            --allowedTools "Bash(gh pr view:*)"
            --allowedTools "Bash(gh pr list:*)"
            --allowedTools "Bash(gh issue view:*)"
            --allowedTools "Bash(gh issue list:*)"
