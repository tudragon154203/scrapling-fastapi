name: CI

on:
  push:          # any branch
  pull_request:

jobs:
  unit_api:
    name: Unit/Contract • ${{ matrix.os }} • Py ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        python: ["3.10"]   # adjust if you standardize on another version
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_CACHE_DIR: ~\AppData\Local\pip\Cache
      PYTHONUNBUFFERED: "1"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip (Windows)
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Lint
        run: flake8 app/ tests/

      - name: Run tests (skip integration)
        run: pytest -q -m "not integration" --disable-warnings --maxfail=1

  integration:
    name: Integration • Ubuntu • Py 3.10
    runs-on: ubuntu-latest
    if: vars.RUN_INTEGRATION == 'true'
    timeout-minutes: 30
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_CACHE_DIR: ~/.cache/pip
      PYTHONUNBUFFERED: "1"
      HEADLESS: "true"         # adjust to your suite
      NETWORK_IDLE: "false"
      TIMEOUT_MS: "20000"
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip (Ubuntu)
        uses: actions/cache@v4
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: linux-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: linux-pip-

      - name: Install dependencies (runtime + test)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip show pytest | sed -n '1,3p' || true

      # If integration needs browsers or system deps, add here:
      # - name: Install system deps
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y chromium-browser

      - name: Run integration tests
        run: pytest -q -m integration --disable-warnings --maxfail=1
