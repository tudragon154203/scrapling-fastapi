name: 'ü™ê Gemini - Dev'

on:
  pull_request:
    types: [opened, reopened, synchronize]
  issue_comment:
    types: [created, edited]
  pull_request_review_comment:
    types: [created, edited]

jobs:
  gemini:
    if: >-
      github.event_name == 'pull_request' ||
      (github.event_name == 'issue_comment' && github.event.comment != null && (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'COLLABORATOR' || github.event.comment.author_association == 'MEMBER') && (startsWith(format('{0}', github.event.comment.body), 'Gemini') || startsWith(format('{0}', github.event.comment.body), 'GEMINI') || startsWith(format('{0}', github.event.comment.body), '@gemini') || startsWith(format('{0}', github.event.comment.body), '@gemini-cli') || startsWith(format('{0}', github.event.comment.body), '/gemini'))) ||
      (github.event_name == 'pull_request_review_comment' && github.event.comment != null && (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'COLLABORATOR' || github.event.comment.author_association == 'MEMBER') && (startsWith(format('{0}', github.event.comment.body), 'Gemini') || startsWith(format('{0}', github.event.comment.body), 'GEMINI') || startsWith(format('{0}', github.event.comment.body), '@gemini') || startsWith(format('{0}', github.event.comment.body), '@gemini-cli') || startsWith(format('{0}', github.event.comment.body), '/gemini')))
    runs-on: ubuntu-latest
    environment: 'Agents/Bots'
    env:
      GEMINI_MODEL: ${{ vars.GEMINI_MODEL || 'gemini-2.5-flash' }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: React with üëÄ to show Gemini is running
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { eventName, payload, repo } = context;
            const owner = repo.owner;
            const repository = repo.repo;

            async function addIssueReaction(issueNumber) {
              if (!issueNumber) {
                core.warning('No issue or PR number found for reaction.');
                return;
              }
              await github.rest.reactions.createForIssue({
                owner,
                repo: repository,
                issue_number: issueNumber,
                content: 'eyes',
              });
            }

            async function addCommentReaction(commentId, type) {
              if (!commentId) {
                core.warning(`No ${type} comment id found for reaction.`);
                return;
              }
              const params = { owner, repo: repository, comment_id: commentId, content: 'eyes' };
              if (type === 'issue') {
                await github.rest.reactions.createForIssueComment(params);
              } else if (type === 'review') {
                await github.rest.reactions.createForPullRequestReviewComment(params);
              }
            }

            try {
              if (eventName === 'pull_request') {
                await addIssueReaction(payload.pull_request?.number);
              } else if (eventName === 'issue_comment') {
                await addCommentReaction(payload.comment?.id, 'issue');
              } else if (eventName === 'pull_request_review_comment') {
                await addCommentReaction(payload.comment?.id, 'review');
              } else {
                core.warning(`Unsupported event "${eventName}" for reaction step.`);
              }
            } catch (error) {
              core.warning(`Failed to add üëÄ reaction: ${error.message}`);
            }

      - name: Skip when Gemini API key is unavailable
        if: ${{ env.GEMINI_API_KEY == '' }}
        run: echo 'GEMINI_API_KEY is not configured. Skipping Gemini workflow.'

      - name: Use Node.js 20
        if: ${{ env.GEMINI_API_KEY != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          check-latest: true

      - name: Checkout repository
        if: ${{ env.GEMINI_API_KEY != '' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare prompt
        if: ${{ env.GEMINI_API_KEY != '' }}
        id: prepare-prompt
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const eventName = context.eventName;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            const prNumber =
              eventName === 'pull_request'
                ? context.payload.pull_request?.number
                : context.payload.issue?.number ?? context.payload.pull_request?.number ?? null;

            async function loadPullRequestContext(number) {
              if (!number) {
                return { pr: null, files: [], commits: [] };
              }
              try {
                const prResponse = await github.rest.pulls.get({
                  owner: repoOwner,
                  repo: repoName,
                  pull_number: number,
                });
                const files = await github.paginate(github.rest.pulls.listFiles, {
                  owner: repoOwner,
                  repo: repoName,
                  pull_number: number,
                  per_page: 100,
                });
                const commits = await github.paginate(github.rest.pulls.listCommits, {
                  owner: repoOwner,
                  repo: repoName,
                  pull_number: number,
                  per_page: 100,
                });
                return { pr: prResponse.data, files, commits };
              } catch (error) {
                core.warning(`Failed to load pull request context: ${error.message}`);
                return { pr: null, files: [], commits: [] };
              }
            }

            function formatPatch(patch) {
              if (!patch) {
                return '';
              }
              const maxChars = 1500;
              let content = patch;
              if (content.length > maxChars) {
                content = `${content.slice(0, maxChars)}\n... (patch truncated)`;
              }
              return ['```diff', content, '```'].join('\n');
            }

            function formatFiles(files) {
              if (!files || files.length === 0) {
                return '_No changed files found._';
              }
              return files
                .map((file) => {
                  const header = `- ${file.filename} (${file.status}, +${file.additions} / -${file.deletions})`;
                  const patch = formatPatch(file.patch);
                  return patch ? `${header}\n${patch}` : header;
                })
                .join('\n\n');
            }

            function formatCommits(commits) {
              if (!commits || commits.length === 0) {
                return '_No commits returned._';
              }
              return commits
                .map((commit) => `- ${commit.sha.slice(0, 7)} ${commit.commit.message.split('\n')[0]}`)
                .join('\n');
            }

            const { pr, files, commits } = await loadPullRequestContext(prNumber);

            const descriptionSource =
              pr?.body ??
              context.payload.pull_request?.body ??
              context.payload.issue?.body ??
              '';
            const description = descriptionSource?.trim();
            const prDescription = description && description.length > 0 ? description : '_No description provided._';

            const commentBody = context.payload.comment?.body?.trim();
            const userRequest = commentBody && commentBody.length > 0 ? commentBody : null;

            const prTitle =
              pr?.title ??
              context.payload.pull_request?.title ??
              context.payload.issue?.title ??
              'unknown';

            const prAuthor =
              pr?.user?.login ??
              context.payload.pull_request?.user?.login ??
              context.payload.issue?.user?.login ??
              'unknown';

            const prUrl =
              pr?.html_url ??
              context.payload.pull_request?.html_url ??
              context.payload.issue?.pull_request?.html_url ??
              context.payload.comment?.html_url ??
              '';

            const sections = [
              'You are a meticulous senior engineer reviewing the following pull request. Provide a thorough analysis of the changes, highlighting intent, quality, and potential issues.',
              'Follow the Markdown response template exactly. Use concise bullet points under each heading, and write `- None noted.` when a section does not apply. Prioritize actionable feedback, missing tests, and blockers.',
              '',
              'Response template:',
              'üìù **Summary**',
              '‚úÖ **Tests & Coverage**',
              '‚ö†Ô∏è **Risks & Regressions**',
              'üí° **Suggestions & Improvements**',
              'üìå **Follow-ups**',
              'üö´ **Blocking Issues**',
              '',
              'Guidelines:',
              '- Reference specific files, commits, or behaviors when possible.',
              '- Explicitly call out missing or insufficient tests.',
              '- Separate blocking issues (must fix before merge) from optional suggestions.',
              '',
              `Repository: ${repoOwner}/${repoName}`,
              `Pull Request: #${pr?.number ?? prNumber ?? 'unknown'}`,
              `Title: ${prTitle}`,
              `Author: ${prAuthor}`,
              `URL: ${prUrl}`,
              '',
              'Changed files:',
              formatFiles(files),
              '',
              'Recent commits:',
              formatCommits(commits),
              '',
              'Pull request description:',
              prDescription,
            ];

            if (userRequest) {
              sections.push('', 'Additional request from comment:', userRequest);
            }

            const prompt = sections.join('\n');

            core.setOutput('prompt', prompt);

      - uses: google-github-actions/run-gemini-cli@v0
        if: ${{ env.GEMINI_API_KEY != '' }}
        id: gemini
        continue-on-error: true
        env:
          NODE_OPTIONS: "--require ${{ github.workspace }}/.github/workflows/scripts/set-node-max-listeners.cjs"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_TITLE: ${{ github.event.pull_request.title || github.event.issue.title || '' }}
          ISSUE_BODY: ${{ github.event.pull_request.body || github.event.issue.body || '' }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number || github.event.issue.number || '' }}
          REPOSITORY: ${{ github.repository }}
          ADDITIONAL_CONTEXT: ${{ github.event.comment.body || '' }}
        with:
          gemini_api_key: ${{ env.GEMINI_API_KEY }}
          gemini_debug: 'false'
          gemini_model: ${{ env.GEMINI_MODEL }}
          prompt: ${{ steps.prepare-prompt.outputs.prompt }}

      - name: Post Gemini response as comment
        if: ${{ always() && env.GEMINI_API_KEY != '' }}
        uses: actions/github-script@v7
        env:
          GEMINI_SUMMARY: ${{ steps.gemini.outputs.summary }}
          GEMINI_ERROR: ${{ steps.gemini.outputs.error }}
          GEMINI_STATUS: ${{ steps.gemini.outcome }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue?.number ?? context.payload.pull_request?.number;
            if (!issue_number) {
              core.warning('No issue or PR number found to post comment.');
              return;
            }
            const status = process.env.GEMINI_STATUS ?? 'unknown';
            const parts = [];
            if (process.env.GEMINI_SUMMARY) {
              parts.push('## ü§ñ Gemini Review\n\n' + process.env.GEMINI_SUMMARY);
            }
            if (process.env.GEMINI_ERROR) {
              parts.push('## ‚ùó Gemini Error\n\n```\n' + process.env.GEMINI_ERROR + '\n```');
            }
            if (status !== 'success') {
              parts.push(`‚ö†Ô∏è _Gemini CLI step ended with status: **${status}**._`);
            }
            const body = parts.join('\n\n').trim();
            if (!body) {
              core.warning('Gemini produced no output to post.');
              return;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body,
            });

      - name: Fail workflow if Gemini step failed
        if: ${{ env.GEMINI_API_KEY != '' && steps.gemini.outcome == 'failure' }}
        run: |
          echo "Gemini CLI step failed"
          exit 1

