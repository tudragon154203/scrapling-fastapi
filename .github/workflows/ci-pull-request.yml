name: 'ðŸ§ª CI - Pull Request (Unit + Integration)'

on:
  pull_request:
    paths:
      - 'app/**'
      - 'tests/**'
      - 'requirements-test.txt'
      - 'requirements.txt'
      - 'pytest.ini'
      - '.flake8'
      - '.pre-commit-config.yaml'

jobs:
  unit_api:
    uses: ./.github/workflows/ci-push.yml
    secrets: inherit

  integration_api:
    name: Integration | ${{ matrix.os }} | Py ${{ matrix.python }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
        python: ["3.10.8"]
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      # When running locally with 'act' on Windows, use the host's pyenv Python 3.10.8
      - name: Use pyenv Python 3.10.8 (ACT Windows only)
        if: runner.os == 'Windows' && env.ACT == 'true'
        shell: pwsh
        run: pwsh -ExecutionPolicy Bypass -File ./.github/workflows/scripts/ci/use_pyenv.ps1

      - name: Set up Python ${{ matrix.python }}
        if: runner.os != 'Windows' || env.ACT != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Cache pip downloads
        id: cache-pip
        if: runner.os != 'Windows' || env.ACT != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~\AppData\Local\pip\Cache
          key: ${{ runner.os }}-pip-${{ matrix.python }}-${{ hashFiles('requirements.txt', 'requirements-test.txt', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python }}-
            ${{ runner.os }}-pip-

      - name: Log pip cache result
        if: runner.os != 'Windows' || env.ACT != 'true'
        run: |
          echo "Cache hit for pip downloads: ${{ steps.cache-pip.outputs.cache-hit }}"

      - name: Use preinstalled deps (ACT Windows)
        if: runner.os == 'Windows' && env.ACT == 'true'
        run: echo "Using local pyenv 3.10.8 with preinstalled dependencies"

      - name: Install dependencies
        if: runner.os != 'Windows' || env.ACT != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-test.txt

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
            ~\AppData\Local\ms-playwright
          key: ${{ runner.os }}-playwright-${{ matrix.python }}-${{ hashFiles('requirements.txt', 'requirements-test.txt', '**/requirements*.txt', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Log Playwright cache result
        run: |
          echo "Cache hit for Playwright browsers: ${{ steps.cache-playwright.outputs.cache-hit }}"

      - name: Install Playwright browsers
        run: playwright install

      - name: Cache Camoufox resources
        id: cache-camoufox
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/camoufox
            ~/.local/share/camoufox
            ~/Library/Application Support/Camoufox
            ~\AppData\Local\Camoufox
          key: ${{ runner.os }}-camoufox-${{ hashFiles('requirements.txt', 'requirements-test.txt', '**/requirements*.txt', 'package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-camoufox-

      - name: Log Camoufox cache result
        run:  |
         echo "Cache hit for Camoufox resources: ${{ steps.cache-camoufox.outputs.cache-hit }}"

      - name: Fetch Camoufox resources
        shell: pwsh
        env:
          CAMOUFOX_MAX_RETRIES: 3
          CAMOUFOX_RETRY_DELAY: 10
        run: pwsh -ExecutionPolicy Bypass -File ./.github/workflows/scripts/ci/fetch_camoufox.ps1

      - name: Update root certificates
        if: runner.os == 'Windows'
        shell: pwsh
        run: pwsh -ExecutionPolicy Bypass -File ./.github/workflows/scripts/ci/update_root_certificates.ps1

      - name: Run integration tests
        run: python -m pytest -q -m "integration" --disable-warnings --maxfail=1

